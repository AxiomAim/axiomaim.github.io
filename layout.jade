doctype
html
  head
    title= title
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    link(href='https://fonts.googleapis.com/css?family=Roboto:900', rel='stylesheet')

    link(rel='stylesheet', href='/stylesheets/style.css')
    link(rel='stylesheet', href='/stylesheets/chunkfive-fontface.css')

    script(type='application/javascript', src='/js/rldemo.js')
    script(type='application/javascript', src='/js/classify2d.js')
    
    script(type='text/javascript', src='/build/convnet.js')
    script(type='text/javascript', src='/build/util.js')
    script(type='text/javascript', src='/build/vis.js')
    script(type='text/javascript', src='/build/deepqlearn.js')
    
    script(type='text/javascript').
      function periodic() {
      var d = document.getElementById('egdiv');
      // d.innerHTML = 'Random number: ' + Math.random()
      var layer_defs = [];
        // input layer of size 1x1x2 (all volumes are 3D)
        layer_defs.push({type:'input', out_sx:1, out_sy:1, out_depth:2});
        // some fully connected layers
        layer_defs.push({type:'fc', num_neurons:20, activation:'relu'});
        layer_defs.push({type:'fc', num_neurons:20, activation:'relu'});
        // a softmax classifier predicting probabilities for two classes: 0,1
        layer_defs.push({type:'softmax', num_classes:2});     
        // create a net out of it
        var net = new convnetjs.Net();
        net.makeLayers(layer_defs);
        // the network always works on Vol() elements. These are essentially
        // simple wrappers around lists, but also contain gradients and dimensions
        // line below will create a 1x1x2 volume and fill it with 0.5 and -1.3
        var x = new convnetjs.Vol([0.5, -1.3]);
        var probability_volume = net.forward(x);
        console.log('probability that x is class 0: ' + probability_volume.w[0]);
        // prints 0.50101        
        // d.innerHTML = 'Random number: ' + probability_volume.w[0]
        var trainer = new convnetjs.Trainer(net, {learning_rate:0.01, l2_decay:0.001});
        trainer.train(x, 0);

        var probability_volume2 = net.forward(x);
        console.log('probability that x is class 0: ' + probability_volume2.w[0]);
        d.innerHTML = 'Random number: ' + probability_volume2.w[0]
        // prints 0.50374        
        
        }
      var net; // declared outside -> global variable in window scope
      function start() {
      // this gets executed on startup
      //...
      net = new convnetjs.Net();
      // ...
      // example of running something every 1 second
      setInterval(periodic, 1000);
      
      
      }

body(onload='start()')
    header
      nav
        ul
          li 
            a(href="/") Home
          li 
            a(href="/about") About
          li 
            a(href="/contact") Contact
          li 
            a(href="/axiomaim") AI Tools
    section#wrapper
      block content
      footer 
        section.css-table
          section.one-column
            section.cell
      section.css-table
        section.one-column
          section.cell
                a(href='https://github.com/axiomaim')
                  img(src='/images/github-32px.png', width='24', height='24')
                  h3 AxiomAim
                a(href='https://twitter.com/axiomaimtrue')
                  img(src='/images/twitter-32px.png', width='24', height='24')
                  h3 AxiomAim
